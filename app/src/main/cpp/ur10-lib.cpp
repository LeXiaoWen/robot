/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string>
#include "ur10.h"
#include "ur10.cpp"
#include "ur.h"
#include "ur.cpp"
#include "data.h"
#include "data.cpp"
#include "log_utils.h"
/* Header for class com_leo_robot_JNIUtils */

#ifndef _Included_com_leo_robot_JNIUtils
#define _Included_com_leo_robot_JNIUtils
#ifdef __cplusplus
extern "C" {
#endif
UR10 ur10;
UR *ur=new UR();
Data *data = new Data();
std::string jstring2str(JNIEnv *env, jstring jstr);
/*
 * Class:     com_leo_robot_JNIUtils
 * Method:    hello
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_leo_robot_JNIUtils_hello
        (JNIEnv *env, jobject) {
//    std::string hello = "这是来自第一个包的信息，请注意查收……";
    UR10 ur10;
    std::string str = ur10.ActionStopJ();
    return env->NewStringUTF(str.c_str());
} ;

#ifdef __cplusplus
}
#endif
#endif

extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_NativeUtils_init(JNIEnv *env, jclass type, jstring msg_, jstring mode_) {
    const char *msg = env->GetStringUTFChars(msg_, 0);
    const char *mode = env->GetStringUTFChars(mode_, 0);

    ur->GetDataPort30003(string(msg), string(mode));

    env->ReleaseStringUTFChars(msg_, msg);
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF("Init Ok");
}extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_NativeUtils_move(JNIEnv *env, jclass type, jstring cmd_, jstring mode_) {
    const char *cmd = env->GetStringUTFChars(cmd_, 0);
    const char *mode = env->GetStringUTFChars(mode_, 0);

    string rs = ur->ActionMove(string(cmd), string(mode));

    env->ReleaseStringUTFChars(cmd_, cmd);
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF(rs.data());
}extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_NativeUtils_join(JNIEnv *env, jclass type, jstring cmd_, jstring mode_) {
    const char *cmd = env->GetStringUTFChars(cmd_, 0);
    const char *mode = env->GetStringUTFChars(mode_, 0);

    string rs = ur->ActionJoint(string(cmd), string(mode));

    env->ReleaseStringUTFChars(cmd_, cmd);
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF(rs.data());
}extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_NativeUtils_stop(JNIEnv *env, jclass type, jstring mode_) {
    const char *mode = env->GetStringUTFChars(mode_, 0);

    string rs = ur->ActionStopJ(string(mode));

    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF(rs.data());
}

//------------------------------------------------ 机械臂相关  --------------------------------------
extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_JNIUtils_GetDataPort29999(JNIEnv *env, jclass type, jstring msg_, jstring mode_) {
    const char *msg = env->GetStringUTFChars(msg_, 0);
    const char *mode = env->GetStringUTFChars(mode_, 0);

    ur->GetDataPort29999(string(msg), string(mode));

    env->ReleaseStringUTFChars(msg_, msg);
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF("Init 29999端口 Ok");
}

extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_JNIUtils_GetDataPort30003(JNIEnv *env, jclass type, jstring msg_, jstring mode_) {
    const char *msg = env->GetStringUTFChars(msg_, 0);
    const char *mode = env->GetStringUTFChars(mode_, 0);

    ur->GetDataPort30003(string(msg), string(mode));

    env->ReleaseStringUTFChars(msg_, msg);
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF("Init 30003 Ok");
}

extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_JNIUtils_ActionMove(JNIEnv *env, jclass type, jstring msg_, jstring mode_) {
    const char *msg = env->GetStringUTFChars(msg_, 0);
    const char *mode = env->GetStringUTFChars(mode_, 0);

    string rs = ur->ActionMove(string(msg), string(mode));

    env->ReleaseStringUTFChars(msg_, msg);
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF(rs.data());
}

extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_JNIUtils_ActionPose(JNIEnv *env, jclass type, jstring msg_, jstring mode_) {
    const char *msg = env->GetStringUTFChars(msg_, 0);
    const char *mode = env->GetStringUTFChars(mode_, 0);

    // TODO
    string rs = ur->ActionPose(string(msg), string(mode));

    env->ReleaseStringUTFChars(msg_, msg);
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF(rs.data());
}

extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_JNIUtils_ActionJoint(JNIEnv *env, jclass type, jstring msg_, jstring mode_) {
    const char *msg = env->GetStringUTFChars(msg_, 0);
    const char *mode = env->GetStringUTFChars(mode_, 0);

    // TODO
    string rs = ur->ActionJoint(string(msg), string(mode));

    env->ReleaseStringUTFChars(msg_, msg);
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF(rs.data());
}
extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_JNIUtils_ActionDash(JNIEnv *env, jclass type, jstring msg_, jstring mode_) {
    const char *msg = env->GetStringUTFChars(msg_, 0);
    const char *mode = env->GetStringUTFChars(mode_, 0);

    // TODO
    string rs = ur->ActionDash(string(msg), string(mode));

    env->ReleaseStringUTFChars(msg_, msg);
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF(rs.data());
}
extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_JNIUtils_ActionStopJ(JNIEnv *env, jclass type, jstring mode_) {
    const char *mode = env->GetStringUTFChars(mode_, 0);

    // TODO
    string rs = ur->ActionStopJ(string(mode));
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF(rs.data());
}
extern "C"
JNIEXPORT void JNICALL
Java_com_leo_robot_JNIUtils_SetMoveSpeed(JNIEnv *env, jclass type, jfloat v, jstring mode_) {
    const char *mode = env->GetStringUTFChars(mode_, 0);

    // TODO
    ur->SetMoveSpeed(v,string(mode));
    env->ReleaseStringUTFChars(mode_, mode);
}

extern "C"
JNIEXPORT void JNICALL
Java_com_leo_robot_JNIUtils_SetMoveAcc(JNIEnv *env, jclass type, jfloat v, jstring mode_) {
    const char *mode = env->GetStringUTFChars(mode_, 0);

    // TODO
    ur->SetMoveAcc(v,string(mode));
    env->ReleaseStringUTFChars(mode_, mode);
}

extern "C"
JNIEXPORT jstring JNICALL
Java_com_leo_robot_JNIUtils_ReadURparam(JNIEnv *env, jclass type, jstring params_, jstring mode_) {
    const char *params = env->GetStringUTFChars(params_, 0);
    const char *mode = env->GetStringUTFChars(mode_, 0);

    // TODO
    string rs = ur->ReadURparam(string(params), string(mode));

    env->ReleaseStringUTFChars(params_, params);
    env->ReleaseStringUTFChars(mode_, mode);

    return env->NewStringUTF(rs.data());
}extern "C"
JNIEXPORT void JNICALL
Java_com_leo_robot_JNIUtils_GetDevicePowerMsg(JNIEnv *env, jclass type, jstring msg_) {
    const char *msg = env->GetStringUTFChars(msg_, 0);

    // TODO
    data->GetDevicePowerMsg(string(msg));

    env->ReleaseStringUTFChars(msg_, msg);
}extern "C"
JNIEXPORT jfloat JNICALL
Java_com_leo_robot_JNIUtils_ReadDevicePower(JNIEnv *env, jclass type, jstring device_) {
    const char *device = env->GetStringUTFChars(device_, 0);

    // TODO
    jfloat rs = data->ReadDevicePower(string(device));

    env->ReleaseStringUTFChars(device_, device);
    return rs;
}